package com.paoalive.webhook.informer;

import com.paoalive.webhook.informer.configuration.PaoAliveConfiguration;
import com.paoalive.webhook.informer.dto.CrawlRawDataDto;
import com.paoalive.webhook.informer.service.PaoAliveService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

@SpringBootApplication
@EnableScheduling
@Slf4j
public class PlayApplication {


    @Autowired
    private PaoAliveService paoAliveService;

    @Autowired
    private PaoAliveConfiguration configuration;


    public static void main(String[] args) {
        SpringApplication.run(PlayApplication.class, args);
    }

    /**
     * Default crawl time very 30 minutes
     */
    @Scheduled(fixedDelay = 1800000)
    public void run() {
        paoAliveService.inform();
    }

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }

    /**
     * The application does not have persistence storage. This is the default comparison values
     * that will be used for the first run, and will be updated during runtime for comparing the
     * fresh crawl data.
     *
     * @return
     */
    @Bean
    public CrawlRawDataDto initValues() {
        CrawlRawDataDto data = CrawlRawDataDto.builder()
                                              .numberOfDonations("12721")
                                              .total("583.598")
                                              .biggestDonor("Donor Δημήτριος Βρανόπουλος 15.000€ 5/8/2019")
                                              .build();
        return data;
    }

    /**
     * The actual webhooks. The key is the post url and the value is the HtttpEntity that will enclose
     * the actual generated by the application message. You can create as many webhooks as needed.
     *
     * IE the one created is for a slack webhook. If you want to create an other slack webhook just
     * create another one map entry with different key (the post url) value
     * @return
     */
    @Bean
    protected Map<String,Function<String, HttpEntity<String>>> getWebHooks() {

        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-type", "application/json");
        Function<String, HttpEntity<String>> slackConsumer = (message) -> new HttpEntity<>("{\"text\":\""+message+"\"}", headers);



        Map<String,Function<String, HttpEntity<String>>> mapWebHooks = new HashMap<>();
        mapWebHooks.put(configuration.getSlackUrl(), slackConsumer);
        return mapWebHooks;
    }

}
